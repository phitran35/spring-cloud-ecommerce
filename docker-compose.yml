version: "3"

services:
#  config-service:
#    container_name: config-service
#    build:
#      context: config-service
#      dockerfile: Dockerfile
#    ports:
#      - "8088:8088"
#    restart: always
#    environment:
#      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8061/eureka
#    networks:
#      - icommerce-network
#  discovery-service:
#    container_name: discovery-service
#    build:
#      context: discovery-service
#      dockerfile: Dockerfile
#    ports:
#      - "8061:8061"
#    restart: always
#    environment:
#      - CLOUD_CONFIG_URL=http://config-service:8088
#    depends_on:
#      - config-service
##    entrypoint: ["./dockerize","-wait=tcp://config-service:8088","-timeout=60s","--","java", "org.springframework.boot.loader.JarLauncher"]
#    networks:
#      - icommerce-network

#  gateway-service:
#    container_name: gateway-service
#    build:
#      context: gateway-service
#      dockerfile: Dockerfile
#    ports:
#      - "8060:8060"
#    restart: always
#    environment:
#      - CLOUD_CONFIG_URL=http://config-service:8088
#    depends_on:
#      - config-service
#      - discovery-service
#      - zipkin-server
#    networks:
#      - icommerce-network
#
#  audit-service:
#    container_name: audit-service
#    build:
#      context: audit-service
#      dockerfile: Dockerfile
#    ports:
#      - "8200:8200"
#    restart: always
#    environment:
#      - CLOUD_CONFIG_URL=http://config-service:8088
#      - RABBITMQ_HOST=rabbitmq
#      - MONGO_HOST=mongo
#    depends_on:
#      - config-service
#      - discovery-service
#      - zipkin-server
#      - mongo
#      - rabbitmq
#    networks:
#      - icommerce-network
#
#  product-service:
#    container_name: product-service
#    build:
#      context: product-service
#      dockerfile: Dockerfile
#    ports:
#      - "8100:8100"
#    restart: always
#    environment:
#      - CLOUD_CONFIG_URL=http://config-service:8088
#      - RABBITMQ_HOST=rabbitmq
#      - POSTGRESQL_HOST=product-db
#    depends_on:
#      - config-service
#      - discovery-service
#      - zipkin-server
#      - product-db
#      - rabbitmq
#    networks:
#      - icommerce-network
#
#  cart-service:
#    container_name: cart-service
#    build:
#      context: cart-service
#      dockerfile: Dockerfile
#    ports:
#      - "8300:8300"
#    restart: always
#    environment:
#      - CLOUD_CONFIG_URL=http://config-service:8088
#      - REDIS_HOST=redis
#    depends_on:
#      - config-service
#      - discovery-service
#      - zipkin-server
#      - redis
#    networks:
#      - icommerce-network
#
#  order-service:
#    container_name: order-service
#    build:
#      context: order-service
#      dockerfile: Dockerfile
#    ports:
#      - "8400:8400"
#    restart: always
#    environment:
#      - CLOUD_CONFIG_URL=http://config-service:8088
#      - MONGO_HOST=mongo
#    depends_on:
#      - config-service
#      - discovery-service
#      - zipkin-server
#      - mongo
#    networks:
#      - icommerce-network

  auth-db:
    image: postgres
    volumes:
      - auth-db-volume:/var/lib/postgresql/data
    ports:
      - 5433:5432
    restart: unless-stopped
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=123
      - POSTGRES_DB=auth-db

  zipkin-server:
    image: openzipkin/zipkin
    container_name: zipkin
    environment:
      STORAGE_TYPE: mem
    ports:
      - "9411:9411"
    restart: always
    networks:
      - icommerce-network

  product-db:
    image: postgres
    volumes:
      - product-db-volume:/var/lib/postgresql/data
    ports:
      - 5434:5432
    restart: unless-stopped
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=123
      - POSTGRES_DB=product-db

  mongo:
    image: mongo
    volumes:
      - mongo-volume:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
    ports:
      - 27018:27017
    restart: unless-stopped

  redis:
    image: redis:6-alpine
    volumes:
      - redis-volume:/data
    ports:
      - 6379:6379
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq
    volumes:
      - rabbitmq-volume:/var/lib/rabbitmq
    ports:
      - 15677:15672
      - 5677:5672
    restart: unless-stopped

volumes:
  product-db-volume: {}
  auth-db-volume: {}
  mongo-volume: {}
  redis-volume: {}
  rabbitmq-volume: {}

networks:
  icommerce-network: